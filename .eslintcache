[{"/Users/kalibry/dev/react-mesto-auth/src/index.js":"1","/Users/kalibry/dev/react-mesto-auth/src/components/Header.js":"2","/Users/kalibry/dev/react-mesto-auth/src/components/Main.js":"3","/Users/kalibry/dev/react-mesto-auth/src/components/ImagePopup.js":"4","/Users/kalibry/dev/react-mesto-auth/src/components/Footer.js":"5","/Users/kalibry/dev/react-mesto-auth/src/components/PopupWithForm.js":"6","/Users/kalibry/dev/react-mesto-auth/src/components/EditPropfilePopup.js":"7","/Users/kalibry/dev/react-mesto-auth/src/contexts/CurrentUserContext.js":"8","/Users/kalibry/dev/react-mesto-auth/src/utils/Api.js":"9","/Users/kalibry/dev/react-mesto-auth/src/components/EditAvatarPopup.js":"10","/Users/kalibry/dev/react-mesto-auth/src/components/AddPlacePopup.js":"11","/Users/kalibry/dev/react-mesto-auth/src/components/Card.js":"12","/Users/kalibry/dev/react-mesto-auth/src/components/InfoTooltip.js":"13","/Users/kalibry/dev/react-mesto-auth/src/components/ProtectedRoute.js":"14","/Users/kalibry/dev/react-mesto-auth/src/components/Register.jsx":"15","/Users/kalibry/dev/react-mesto-auth/src/components/Login.jsx":"16","/Users/kalibry/dev/react-mesto-auth/src/utils/Auth.js":"17","/Users/kalibry/dev/react-mesto-auth/src/components/App.jsx":"18"},{"size":320,"mtime":1610193884044,"results":"19","hashOfConfig":"20"},{"size":544,"mtime":1607610234520,"results":"21","hashOfConfig":"20"},{"size":1629,"mtime":1607413526573,"results":"22","hashOfConfig":"20"},{"size":703,"mtime":1607344383941,"results":"23","hashOfConfig":"20"},{"size":238,"mtime":1607344383939,"results":"24","hashOfConfig":"20"},{"size":843,"mtime":1607344383944,"results":"25","hashOfConfig":"20"},{"size":2075,"mtime":1609748135629,"results":"26","hashOfConfig":"20"},{"size":84,"mtime":1607344383945,"results":"27","hashOfConfig":"20"},{"size":1985,"mtime":1607344383977,"results":"28","hashOfConfig":"20"},{"size":920,"mtime":1607344383937,"results":"29","hashOfConfig":"20"},{"size":1148,"mtime":1607344383933,"results":"30","hashOfConfig":"20"},{"size":1728,"mtime":1609834188925,"results":"31","hashOfConfig":"20"},{"size":914,"mtime":1607613624269,"results":"32","hashOfConfig":"20"},{"size":590,"mtime":1607501753303,"results":"33","hashOfConfig":"20"},{"size":1962,"mtime":1607610618485,"results":"34","hashOfConfig":"20"},{"size":1715,"mtime":1607610606844,"results":"35","hashOfConfig":"20"},{"size":988,"mtime":1607845182650,"results":"36","hashOfConfig":"20"},{"size":9362,"mtime":1607845177157,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8br2i0",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},"/Users/kalibry/dev/react-mesto-auth/src/index.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/Header.js",[],["76","77"],"/Users/kalibry/dev/react-mesto-auth/src/components/Main.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/ImagePopup.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/Footer.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/PopupWithForm.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/EditPropfilePopup.js",[],"/Users/kalibry/dev/react-mesto-auth/src/contexts/CurrentUserContext.js",[],"/Users/kalibry/dev/react-mesto-auth/src/utils/Api.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/EditAvatarPopup.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/AddPlacePopup.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/Card.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/InfoTooltip.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/ProtectedRoute.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/Register.jsx",[],"/Users/kalibry/dev/react-mesto-auth/src/components/Login.jsx",[],"/Users/kalibry/dev/react-mesto-auth/src/utils/Auth.js",[],"/Users/kalibry/dev/react-mesto-auth/src/components/App.jsx",["78"],"import React from \"react\";\nimport { Route, Switch, Redirect, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport ImagePopup from \"./ImagePopup\";\nimport PopupWithForm from \"./PopupWithForm\";\nimport EditProfilePopup from \"./EditPropfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport Register from \"./Register.jsx\";\nimport Login from \"./Login.jsx\";\nimport InfoToolTip from \"./InfoTooltip\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport { api } from \"../utils/Api\";\nimport * as auth from \"../utils/Auth\";\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\";\n\nfunction App() {\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(\n    false\n  );\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(\n    false\n  );\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isSpinnerLoading, setIsSpinnerLoading] = React.useState(false);\n  const [selectedCard, setSelectedCard] = React.useState({});\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [cards, setCards] = React.useState([]);\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n  const [isAuthPopupOpen, setIsAuthPopupOpen] = React.useState(false);\n  const [userInfo, setUserInfo] = React.useState({\n    email: \"\",\n  });\n  const [isSignedUp, setIsSignedUp] = React.useState(false);\n  const [message, setMessage] = React.useState('');\n\n  const userEmail = userInfo.email;\n\n  const history = useHistory();\n\n  React.useEffect(() => {\n    tokenCheck();\n  }, []);\n\n  function handleRegister({ password, email }) {\n    auth\n      .register(password, email)\n      .then((data) => {\n        setUserInfo({\n          email: data.data.email,\n        });\n        setIsSignedUp(true);\n        setIsAuthPopupOpen(!isAuthPopupOpen);\n        history.push(\"/sign-in\");\n      })\n      .catch((err) => {\n        console.log(err)\n        if (err === 400) {\n          setMessage('Некорректно заполнено одно из полей');\n        }\n          setIsSignedUp(false);\n          setIsAuthPopupOpen(!isAuthPopupOpen);\n      });\n  }\n\n  function handleLogin({ password, email }) {\n    auth\n      .authorize(password, email)\n      .then((data) => {\n        if (data.token) {\n          localStorage.setItem(\"jwt\", data.token);\n        }\n        setIsLoggedIn(true);\n        setUserInfo({\n          email: email,\n        });\n        history.push(\"/\");\n      })\n      .catch((err) => {\n        if (err === 400) {\n          setMessage('Не передано одно из полей');\n        } else if (err === 401) {\n          setMessage('Пользователь с email не найден');\n        }\n        setIsSignedUp(false);\n        setIsAuthPopupOpen(true);\n      });\n  }\n\n  function tokenCheck() {\n    const jwt = localStorage.getItem(\"jwt\");\n    if (jwt) {\n      auth\n        .getContent(jwt)\n        .then((res) => {\n          if (res.data.email) {\n            setUserInfo({\n              email: res.data.email,\n            })\n            setIsLoggedIn(true);\n            history.push(\"/\");\n          };\n        })\n        .catch((err) => console.error(err));\n    }\n  }\n\n  function handleLogOut() {\n    localStorage.removeItem(\"jwt\");\n    setUserInfo({\n      email: '',\n    });\n    setIsLoggedIn(false);\n  }\n\n  React.useEffect(() => {\n    setIsSpinnerLoading(true);\n    api\n      .getAppInfo(\"users/me\", \"cards\")\n      .then((data) => {\n        const [userData, cardsArray] = data;\n        setCards(cardsArray);\n        setCurrentUser(userData);\n      })\n      .catch((err) => console.log(`Error ${err}`))\n      .finally(() => {\n        setIsSpinnerLoading(false);\n      });\n  }, []);\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(!isEditAvatarPopupOpen);\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(!isEditProfilePopupOpen);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(!isAddPlacePopupOpen);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsAuthPopupOpen(false);\n\n    if (selectedCard.link) {\n      setSelectedCard(!selectedCard.link);\n    }\n  }\n\n  function handleCardDelete(id) {\n    api\n      .delete(\"cards\", id)\n      .then(() => {\n        const newCards = cards.filter((c) => {\n          return c._id !== id;\n        });\n        setCards(newCards);\n      })\n      .catch((err) => console.log(`Error ${err}`));\n  }\n\n  function handleCardLike(card) {\n    // Проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some((i) => i._id === currentUser._id);\n    if (!isLiked) {\n      // Отправляем запрос в API и получаем обновлённые данные карточки\n      api\n        .put(\"cards/likes\", card._id)\n        .then((newCard) => {\n          // Формируем новый массив на основе имеющегося\n          const newCards = cards.map((c) => (c._id === card._id ? newCard : c));\n          // Обновляем стейт\n          setCards(newCards);\n        })\n        .catch((err) => console.log(`Error ${err}`));\n    } else {\n      api\n        .delete(\"cards/likes\", card._id)\n        .then((newCard) => {\n          // Формируем новый массив на основе имеющегося\n          const newCards = cards.map((c) => (c._id === card._id ? newCard : c));\n          // Обновляем стейт\n          setCards(newCards);\n        })\n        .catch((err) => console.log(`Error ${err}`));\n    }\n  }\n\n  function handleUpdateUser({ name, about }) {\n    api\n      .updateInfo(\"users/me\", {\n        name,\n        about,\n      })\n      .then((data) => {\n        setCurrentUser(data);\n        closeAllPopups();\n      })\n      .catch((err) => console.log(`Error ${err}`));\n  }\n\n  function handleUpdateAvatar({ avatar }) {\n    api\n      .updateAvatar(\"users/me/avatar\", {\n        avatar,\n      })\n      .then((data) => {\n        setCurrentUser(data);\n        closeAllPopups();\n      })\n      .catch((err) => console.log(`Error ${err}`));\n  }\n\n  function handleAddPlace({ name, link }) {\n    api\n      .addCard(\"cards\", {\n        name,\n        link,\n      })\n      .then((newCard) => {\n        setCards([newCard, ...cards]);\n        closeAllPopups();\n      })\n      .catch((err) => console.log(`Error ${err}`));\n  }\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <header className=\"header\">\n          <Route exact path=\"/\">\n            <Header\n              isLoggedIn={isLoggedIn}\n              title={\"Выйти\"}\n              link={\"sign-in\"}\n              userData={userEmail}\n              onLogOut={handleLogOut}\n            />\n          </Route>\n          <Route path=\"/sign-up\">\n            <Header isLoggedIn={isLoggedIn} title={\"Войти\"} link={\"sign-in\"} />\n          </Route>\n          <Route path=\"/sign-in\">\n            <Header\n              isLoggedIn={isLoggedIn}\n              title={\"Регистрация\"}\n              link={\"sign-up\"}\n            />\n          </Route>\n        </header>\n        <Switch>\n          <Route path=\"/sign-up\">\n            <Register onFormSubmit={handleRegister} />\n          </Route>\n          <Route path=\"/sign-in\">\n            <Login onFormSubmit={handleLogin} tokenCheck={tokenCheck} />\n          </Route>\n          <ProtectedRoute\n            exact\n            path=\"/\"\n            isLoggedIn={isLoggedIn}\n            onEditAvatar={handleEditAvatarClick}\n            onEditProfile={handleEditProfileClick}\n            onAddPlace={handleAddPlaceClick}\n            onClose={closeAllPopups}\n            onCardClick={handleCardClick}\n            cards={cards}\n            onCardDelete={handleCardDelete}\n            onCardLike={handleCardLike}\n            isLoading={isSpinnerLoading}\n            component={Main}\n          />\n          <Route exact path=\"/\">\n            {isLoggedIn ? <Redirect to=\"/\" /> : <Redirect to=\"/sign-in\" />}\n          </Route>\n        </Switch>\n        <Footer />\n        <EditProfilePopup\n          isOpen={isEditProfilePopupOpen}\n          onClose={closeAllPopups}\n          isClose={isEditProfilePopupOpen}\n          onUpdateUser={handleUpdateUser}\n        />\n        <AddPlacePopup\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopups}\n          isClose={isAddPlacePopupOpen}\n          onAddPlace={handleAddPlace}\n        />\n        <PopupWithForm name={\"confirm-card-del\"} title={\"Вы уверены?\"} />\n        <EditAvatarPopup\n          isOpen={isEditAvatarPopupOpen}\n          onClose={closeAllPopups}\n          isClose={isEditAvatarPopupOpen}\n          onCardClick={handleCardClick}\n          onUpdateAvatar={handleUpdateAvatar}\n        />\n        <ImagePopup card={selectedCard} onClose={closeAllPopups} />\n        <InfoToolTip\n          isOpen={isAuthPopupOpen}\n          onClose={closeAllPopups}\n          isSignedUp={isSignedUp}\n          message={message}\n        />\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":45,"column":6,"nodeType":"85","endLine":45,"endColumn":8,"suggestions":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'tokenCheck'. Either include it or remove the dependency array.","ArrayExpression",["89"],"no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [tokenCheck]",{"range":"92","text":"93"},[1683,1685],"[tokenCheck]"]